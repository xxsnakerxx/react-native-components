// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Overlay renders correctly as modal 1`] = `null`;

exports[`Overlay renders correctly when visible 1`] = `
<View
  pointerEvents="auto"
  removeClippedSubviews={false}
  style={
    Array [
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      },
      Object {
        "opacity": 1,
        "overflow": "visible",
      },
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "rgba(0, 0, 0, 0.75)",
        "bottom": 0,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      accessible={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </View>
</View>
`;

exports[`Overlay renders correctly with defaults 1`] = `
<View
  pointerEvents="none"
  removeClippedSubviews={true}
  style={
    Array [
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      },
      Object {
        "opacity": 0,
        "overflow": "hidden",
      },
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "rgba(0, 0, 0, 0.75)",
        "bottom": 0,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      accessible={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </View>
</View>
`;

exports[`Overlay renders correctly with layer 1`] = `
<View
  pointerEvents="none"
  removeClippedSubviews={true}
  style={
    Array [
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      },
      Object {
        "opacity": 0,
        "overflow": "hidden",
      },
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "transparent",
        "bottom": 0,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 200,
      }
    }
  >
    <Text
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      Layer
    </Text>
  </View>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      accessible={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </View>
</View>
`;

exports[`Overlay renders correctly with spinner 1`] = `
<View
  pointerEvents="none"
  removeClippedSubviews={true}
  style={
    Array [
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      },
      Object {
        "opacity": 0,
        "overflow": "hidden",
      },
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "rgba(0, 0, 0, 0.75)",
        "bottom": 0,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="red"
        hidesWhenStopped={true}
        size="large"
      />
    </View>
  </View>
</View>
`;
